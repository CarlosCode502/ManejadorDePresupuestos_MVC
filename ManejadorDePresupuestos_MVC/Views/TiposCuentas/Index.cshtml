@*
    //V# 115 Listado Tipos Cuentas (Creando la vista Index)
*@

@model IEnumerable<TipoCuentaViewModel>

@{
    ViewData["Title"] = "Listado Tipos de Cuentas";
}

@* Textos de encabezado *@
<h1 class="text-uppercase">Tipos de cuentas</h1>
<h5>El tipo de cuenta se refiere a como podemos agrupar cuentas.</h5>
<h6><strong>Ejemplo: </strong>Préstamos, tarjetas de crédito, etc.</h6>

@* Enlace o link para ir a la vista Crear *@
<a asp-action="Crear" class="btn btn-primary mb-3">Crear nuevo</a>

@* Tabla para mostrar los datos  *@
<table class="table">
    @* Encabezado de la tabla *@
    <thead>
        @* Fila *@
        <tr>
            @* Columnas *@
            <th>Acciones</th>
            <th>Nombre</th>
        </tr>
    </thead>
    @* Cuerpo *@
    @* //V#119 Arrastrando filas de una tabla (creando un id para el cuerpo de la tabla) 
        Solo aquí podra arrastrar o ordenar los registros el usuario*@    
    <tbody id="reordenable">
        @foreach (var tipoCuenta in Model)
        {
            @* Filas *@
            <tr>
                @* Celdas *@
                <td>
                    @* //V#120 Haciendo un post con el FETCH API (Creando un input hidden con el id)
                    Crear un input que va a contener el id de un tipoCuenta este va a ser hiden *@
                    <input type="hidden" value="@tipoCuenta.Id" class="ids" />
                    @* //V#117 Actualizando Tipos Cuentas (Redirigiendo a la vista editar) *@
                    <a class="btn btn-primary" asp-action="Editar" asp-route-id="@tipoCuenta.Id">Editar</a>
                    @* //V#118 Borrando tipos de cuentas (Redirigiendo a la vista borrar)*@
                    <a class="btn btn-danger" asp-action="Borrar" asp-route-id="@tipoCuenta.Id">Eliminar</a>
                </td>
                <td>
                    @tipoCuenta.Nombre
                </td>
            </tr>
        }
    </tbody>
</table>

@* //V#119 Arrastrando filas de una tabla (Creando la sección scripts) 
Usando Jquery para la función de ordenamiento con Jquery UI *@
@section Scripts{
    <script>

        //V#120 Haciendo un post con el FETCH API (Creando una constante tipo URL)
        //Var constante y  a través de razor obtenemos una url con la action Ordenar HttpPost (del controller)
        const urlOrdenar = '@Url.Action("Ordenar")';

        //Espera a que se carge todo el doc para finalmente ejecutar el script JS
        //Esto es JQuery
        $(function(){
            $("#reordenable").sortable({
                //V#120 Haciendo un post con el FETCH API (Creando una funcion luego de detener se actualice el orden de tabla TC)
                //Al detenerse la función actualizar el orden de los registros de la tabla tiposCuenta
                stop: async function (e, ui) {
                    await actualizarOrdenes(); //Llamamos la función creada abajo luego
                }
            });

            //V#120 Haciendo un post con el FETCH API (Funcion que actualizará en base a los ids)
            async function actualizarOrdenes(){
                const ids = obtenerIdsDeElementos(); //Otra función creada luego que obtendra los ids (listado de ids)

                //V#120 Haciendo un post con el FETCH API (Luego de retornar los ids)
                await enviarIdsAlBackend(ids);
            }

            //V#120 Haciendo un post con el FETCH API (Función que obtiene los ids según se vayan mostrando en el foreach del Index)
            function obtenerIdsDeElementos(){
                //Almacena todos los id con la clase .ids por eso apunta(seleciona id hidden) a esta
                const ids = $(".ids").map(function () {
                    //Obtiene cada uno y su valor para poder iterarlo
                    return $(this).val()
                }).get(); //Convierte los ids obtenidos en un arreglo

                //Retorna el listado de arreglos
                return ids;
            }

            //V#120 Haciendo un post con el FETCH API (Enviar ids obtenidos a través del FETCH API (especificamos parametros))
            //EN ESTE PUNTO VOLVIMOS ASYNC Y AWAIT ALGUNAS FUNCIONES
            async function enviarIdsAlBackend(ids) {
                //Obtiene los id a formato Json para poder enviarlos
                var data = JSON.stringify(ids);

                //Utilizamos el fetch api y llenamos parametros
                //Recibe como param la url del action del controller "Ordenar"
                await fetch(urlOrdenar, {
                    method: 'POST', //Tipo de envio
                    body: data, //En el cuerpo va a ir los id
                    headers: {
                        'Content-Type': 'application/json' //Tipo de contenido
                    }
                });
            }
        })
    </script>
}